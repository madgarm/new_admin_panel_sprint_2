version: '3.9'

volumes:
    postgres_data:
    static_volume:
    media_volume:

services:
  postgres:
    image: postgres:14.2-alpine
    container_name: ${COMPOSE_PROJECT_NAME}_postgresql
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./_postgresql/init-schema-db.sh:/docker-entrypoint-initdb.d/init-schema-db.sh
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      test: pg_isready -U ${DB_USER} -d ${DB_NAME}
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "${DB_PORT_EXTERNAL}:5432"
    env_file:
      - .env

  django:
    container_name: ${COMPOSE_PROJECT_NAME}_django
    build:
      context: .
      dockerfile: _docker/Dockerfile
    command: bash -c "python manage.py collectstatic --no-input --clear && gunicorn --env DJANGO_SETTINGS_MODULE=config.settings -c config/gunicorn.py"
    depends_on:
      - postgres
      - django_migration
    volumes:
      - static_volume:/opt/app/staticfiles
      - media_volume:/opt/app/mediafiles
    expose:
      - 8000
    env_file:
      - .env

  django_migration:
    container_name: ${COMPOSE_PROJECT_NAME}_django_migration
    build:
      context: .
      dockerfile: _docker/Dockerfile
    command: python manage.py migrate
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env

  nginx:
    image: nginx:1.23-alpine
    volumes:
      - ./_nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./_nginx/site.conf:/etc/nginx/conf.d/site.conf:ro
      - static_volume:/opt/app/staticfiles
      - media_volume:/opt/app/mediafiles
    depends_on:
      - django
    ports:
      - "80:80"
    env_file:
      - .env